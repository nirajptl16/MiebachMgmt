generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  MANAGER
  CONTRIBUTOR
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      Role     
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

 
  projectStaffing ProjectStaffing[]
  taskAssignments TaskAssignment[]
  timeEntries     TimeEntry[]

  @@index([email])
  @@index([role])
  @@map("users")
}

model Project {
  id         String   @id @default(cuid())
  name       String
  clientName String
  startDate  DateTime
  endDate    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  staffing ProjectStaffing[]
  phases   ProjectPhase[]
  invoices Invoice[]

  @@index([clientName])
  @@index([startDate])
  @@index([endDate])
  @@map("projects")
}

model ProjectStaffing {
  id            String   @id @default(cuid())
  projectId     String
  userId        String
  roleName      String
  hourlyRate    Decimal  @db.Decimal(10, 2) // Better for money
  forecastHours Decimal  @db.Decimal(8, 2)  // Better for hours
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId]) // One user per project
  @@index([projectId])
  @@index([userId])
  @@map("project_staffing")
}

model ProjectPhase {
  id        String   @id @default(cuid())
  projectId String
  name      String
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks   Task[]

  @@index([projectId])
  @@index([startDate])
  @@map("project_phases")
}

model Task {
  id          String     @id @default(cuid())
  phaseId     String
  title       String
  description String?    @db.Text
  status      TaskStatus @default(TODO)
  startDate   DateTime
  endDate     DateTime
  dueDate     DateTime
  budget      Decimal    @db.Decimal(10, 2) // Better for money
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  phase       ProjectPhase     @relation(fields: [phaseId], references: [id], onDelete: Cascade)
  assignments TaskAssignment[]
  timeEntries TimeEntry[]

  @@index([phaseId])
  @@index([status])
  @@index([dueDate])
  @@map("tasks")
}

model TaskAssignment {
  id         String   @id @default(cuid())
  taskId     String
  userId     String
  hourlyRate Decimal  @db.Decimal(10, 2)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId])
  @@index([taskId])
  @@index([userId])
  @@map("task_assignments")
}

model TimeEntry {
  id         String   @id @default(cuid())
  taskId     String
  userId     String
  date       DateTime @db.Date
  hours      Decimal  @db.Decimal(5, 2)
  remainingHours Decimal @db.Decimal(8, 2) 
  isBillable Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([userId])
  @@index([date])
  @@index([isBillable])
  @@map("time_entries")
}

model Invoice {
  id          String   @id @default(cuid())
  projectId   String
  clientName  String
  periodStart DateTime @db.Date
  periodEnd   DateTime @db.Date
  totalAmount Decimal  @db.Decimal(10, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([clientName])
  @@index([periodStart])
  @@map("invoices")
}